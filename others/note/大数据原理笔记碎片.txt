

WRANING: 以下内容还处于修改状态!!






Spark简介
------------------
基于内存计算的大数据并行计算框架,可用构建大型的,低延时的数据分析程序. 使用Scala作为主要开发语言, 但也支持Java和Python等语言

### Spark生态系统

组件             | 作用             | 应用场景
----------------|------------------|---------------------
Spark Core      | 内存计算          | 复杂的批量数据处理
Spark SQL       | 交互式查询分析     | 基于历史数据的交互式查询
Spark Streaming | 流计算            | 基于实时数据流的数据处理
Mllib           | 机器学习算法库组件 | 基于历史数据的数据挖掘
GraphX          | 图计算            | 图结构数据的处理

### 运行架构

#### RDD
弹性分布式数据集(Resillient Distributed Dataset, RDD), 是分布式内存的一种抽象概念,提供了高度受限的共享内存模型

#### DAG
有向无环图(Directed Acyclic Graph, DAG), 用于反映RDD之间的依赖关系

#### Executor
运行在工作节点的一个进程, 负责运行Task

#### Application
用户编写的Spark应用程序

#### Task
运行在Executor上的工作单元

#### Job
包含多个RDD以及作用于相应RDD的各种操作

#### Stage
Job的基本调度单位, 一个Job会分成多组Task, 每组Task称为Stage或TaskSet, 代表了一组关联的,相互之间没有Shuffle依赖关系的任务组成的任务集

<!-- Spark运行架构图 -->


#### 架构的优势
- 使用多线程来执行具体的任务,减少任务启动的开销
- Executor中有一个BlockManager存储模块, 会将内存和磁盘共同作为存储设备, 减少IO开销






流计算
-------------------

### 静态数据与流数据
静态数据一旦保存到数据仓库中,就不再改变. 
流数据以大量, 快速, 实时产生.

#### 流数据的特点
- 数据快速持续到达
- 来源众多,结构复杂
- 数据量大但不关注存储
- 关注整体价值
- 数据顺序无法保证, 完整性也无法保证

### 流计算
实时获得来自不同数据源的海量数据,经过实时分析获得有价值的信息

#### 基本理念
数据的价值随时间的流逝而降低, 必须对数据进行实时处理




### 流数据处理流程

<!-- 流计算处理流程图 -->

Agent 主动采集数据, 把数据推送到Collector部分.
Collector 接收多个Agent的数据并实现有序,可靠,高性能的转发
Store存储Collector转发的数据(对于流数据不存储)



### 流计算与传统数据处理的区别
- 流数据系统处理实时数据, 传统数据处理系统处理的是预先存储好的静态数据
- 用户通过流数据系统获得的是实时结果, 而传统数据处理方式获得的是过去某一个历史时刻的快照
- 流数据系统主动向用户推送结果,传统数据处理系统由用户主动查询





云数据库简介
-------------

### 云计算的优势
1. 按需服务
2. 随时服务
3. 通用性
4. 高可靠性
5. 极其廉价
6. 超大规模
7. 虚拟化技术
8. 可扩展性

### 云数据库的优势
1. 动态可扩展
2. 较低的使用代价
3. 免维护
4. 高可用性
5. 易用性


### 云数据库架构
UMP系统
- 单一的对外访问入口
- 消除单点故障, 保证服务高可用性
- 具有良好的可伸缩性,能动态的增加或减少计算资源
- 实现资源之间的相互隔离

#### Mnesia
- 是一个分布式数据库管理系统
- 支持事务,支持透明数据分配,利用两段锁实现分布式事务
- 可以线性扩展至50个节点
- 数据库模式可以在运行时动态重配置

#### RabbitMQ
- 消息队列产品

#### Zookeeper
- 高效可靠的协调服务
- 作为全局的配置服务器(同步配置等)
- 提供分布式锁(选出一个集群的"总管")
- 监控节点上的MySQL实例状态

#### LVS
- Linux虚拟服务器(Linux Virtual Server,LVS)
- 是一个虚拟的服务器集群系统
- 用于实现集群内部的负载均衡
- 采用基于IP的负载均衡技术和基于内容请求的负载均衡技术
- 调度器是LVS集群系统的唯一入口点

#### Controller服务器
- UMP系统的总管
- 存储集群策划功成员,用户的配置信息
- 存储路由表(用户名和底层数据库实例的映射关系表)

#### Proxy服务器
- 向用户提供MySQL数据库服务
- 实现MySQL协议,从而使用户可以使用MySQL客户端连接数据库
- 对用户信息进行认证
- 对资源配额进行限制

#### Agent服务器
- 部署在运行MySQL进程的机器上
- 管理每台物理机上的MySQL实例

#### 日志分析服务器
- 对日志进行记录,从而进行后续的分析

#### 信息统计服务器
- 记录运行数据,包括用户连接数,每秒查询数,MySQL进程状态等

#### 愚公系统
- 实现数据库迁移
- 运行系统不停机的状态下实现数据库的扩容,收缩和迁移

<!-- 全体的图片 -->


### UMP系统功能

#### 容灾
- 是云数据库必备的基础功能
- 一般为用户创建两个MySQL实例

主库切换过程
Controller服务器修改路由表
主库标记不可用
将路由修改同步到Proxy服务器

主库恢复过程
主库更新赋值从库内容, 待主库几乎完成同步后,从库暂停服务,等待主库复制完成,主从库状态一致后,即可由主库服务

#### 读写分离
- 充分利用主从库实现读写分离,实现负载均衡
- 写操作发送给主库, 读操作军均衡的发送到主库和从库

#### 分库分表
- 支持对用户透明的将表分布到不同的机器

Proxy服务器解析用户的SQL语句, 提取必要信息. 然后对SQL语句进行重写, 使得能操作分发到相应的MySQL实例上执行. 提取来自各MySQL实例的执行结果,合并得到最终结果